<%@ page language="java" contentType="text/html; charset=UTF-8"
	pageEncoding="UTF-8"%>
<%@ taglib uri="http://java.sun.com/jsp/jstl/core" prefix="c"%>
<script type="text/javascript"
	src="//dapi.kakao.com/v2/maps/sdk.js?appkey=36584831e197b98edd86956a97705ecb&libraries=services"></script>
<script
	src="https://ajax.googleapis.com/ajax/libs/jquery/3.6.0/jquery.min.js"></script>
<style>
#container {
	overflow: hidden;
	height: 450px;
	width: 960px;
	position: relative;
	margin-left : 20%;
	margin-top: 5px;
	border: 1px solid gray;
}

#mapWrapper {
	width: 100%;
	height: 450px;
	z-index: 1;
}

#rvWrapper {
	width: 50%;
	height: 450px;
	top: 0;
	right: 0;
	position: absolute;
	z-index: 0;
}

#container.view_roadview #mapWrapper {
	width: 50%;
}

#roadviewControl {
	position: absolute;
	top: 5px;
	left: 5px;
	width: 42px;
	height: 42px;
	z-index: 1;
	cursor: pointer;
	background:
		url(https://t1.daumcdn.net/localimg/localimages/07/2018/pc/common/img_search.png)
		0 -450px no-repeat;
}

#roadviewControl.active {
	background-position: 0 -350px;
}

#close {
	position: absolute;
	padding: 4px;
	top: 5px;
	left: 5px;
	cursor: pointer;
	background: #fff;
	border-radius: 4px;
	border: 1px solid #c8c8c8;
	box-shadow: 0px 1px #888;
}

#close .img {
	display: block;
	background:
		url(https://t1.daumcdn.net/localimg/localimages/07/mapapidoc/rv_close.png)
		no-repeat;
	width: 14px;
	height: 14px;
}

textarea {
	text-align: center;
}

table.library_body {
	text-align: center;
	border-collapse: collapse;
	width: 960px;
	height: 150px;
}

h1#h1 {
	text-align: center;
	color: black;
	margin-top: 20px;
	font-size: 30px;
}

div#library_div {
	margin-left: 20%;
	margin-top: 2%;
	font-family: 'Nanum Gothic'
}

div#library_title {
	margin: 5px;
	color: #808080f2;
}

table tr:nth-child(1) {
	background: #5ae70b2e;
	height: 50px;
}
</style>
<h1 id="h1">근처 도서관 찾기</h1>
<div id="container">
	<div id="rvWrapper">
		<div id="roadview" style="width: 100%; height: 100%;"></div>
		<!-- 로드뷰를 표시할 div 입니다 -->
		<div id="close" title="로드뷰닫기" onclick="closeRoadview()">
			<span class="img"></span>
		</div>
	</div>
	<div id="mapWrapper">
		<div id="map" style="width: 100%; height: 100%"></div>
		<!-- 지도를 표시할 div 입니다 -->
		<div id="roadviewControl" onclick="setRoadviewRoad()"></div>
	</div>
	<input type="hidden" id='addr' value="${fvo.mbr_addr}"> <input
		type="hidden" id='daddr' value="${fvo.mbr_daddr}">
</div>
<div id="info"></div>
<script>
	let markX = 0;
	let markY = 0;
	
	var daddr = $('#daddr').val();

	var overlayOn = false, // 지도 위에 로드뷰 오버레이가 추가된 상태를 가지고 있을 변수
	container = document.getElementById('container'), // 지도와 로드뷰를 감싸고 있는 div 입니다
	mapWrapper = document.getElementById('mapWrapper'), // 지도를 감싸고 있는 div 입니다
	mapContainer = document.getElementById('map'), // 지도를 표시할 div 입니다 
	rvContainer = document.getElementById('roadview'); //로드뷰를 표시할 div 입니다

	// 주소를 좌표로 변환
	var geocoder = new kakao.maps.services.Geocoder();
	
	// result[0].x,y가 좌표
	var callback = function(result, status) {
		if (status === kakao.maps.services.Status.OK) {
			markX = result[0].x;
			markY = result[0].y;
			fExp();
		}
	};    
	geocoder.addressSearch($("#addr").val(), callback)
	
	var mapCenter,mapOption,map,rv,mapTypeControl,zoomControl,rvClient,position;

	function fExp(){
		mapCenter = new kakao.maps.LatLng(parseFloat(markY), parseFloat(markX)) // 지도의 중심좌표\
		mapOption = {
			center: mapCenter, // 지도의 중심좌
			level: 3 // 지도의 확대 레벨
		};
		
		// 지도를 표시할 div와 지도 옵션으로 지도를 생성합니다
		map = new kakao.maps.Map(mapContainer, mapOption);
		
		// 로드뷰 객체를 생성합니다 
		rv = new kakao.maps.Roadview(rvContainer);
		
		//지도 타입 변경 컨트롤을 생성한다
		mapTypeControl = new kakao.maps.MapTypeControl();
		
		//지도의 상단 우측에 지도 타입 변경 컨트롤을 추가한다
		map.addControl(mapTypeControl, kakao.maps.ControlPosition.TOPRIGHT);
		
		//지도에 확대 축소 컨트롤을 생성한다
		zoomControl = new kakao.maps.ZoomControl();
		
		//지도의 우측에 확대 축소 컨트롤을 추가한다
		map.addControl(zoomControl, kakao.maps.ControlPosition.RIGHT);
		
		// 좌표로부터 로드뷰 파노라마 ID를 가져올 로드뷰 클라이언트 객체를 생성합니다 
		rvClient = new kakao.maps.RoadviewClient(); 
		
		// 로드뷰에 좌표가 바뀌었을 때 발생하는 이벤트를 등록합니다 
		kakao.maps.event.addListener(rv, 'position_changed', function() {
		
			// 현재 로드뷰의 위치 좌표를 얻어옵니다 
			var rvPosition = rv.getPosition();
		
			// 지도의 중심을 현재 로드뷰의 위치로 설정합니다
			map.setCenter(rvPosition);
			
			// 지도 위에 로드뷰 도로 오버레이가 추가된 상태이면
			if(overlayOn) {
				// 마커의 위치를 현재 로드뷰의 위치로 설정합니다
				marker.setPosition(rvPosition);
			}
		});
		
		// 마커 이미지를 생성합니다
		var markImage = new kakao.maps.MarkerImage(
			'https://t1.daumcdn.net/localimg/localimages/07/2018/pc/roadview_minimap_wk_2018.png',
			new kakao.maps.Size(26, 46),
			{
				// 스프라이트 이미지를 사용합니다.
				// 스프라이트 이미지 전체의 크기를 지정하고
				spriteSize: new kakao.maps.Size(1666, 168),
				// 사용하고 싶은 영역의 좌상단 좌표를 입력합니다.
				// background-position으로 지정하는 값이며 부호는 반대입니다.
				spriteOrigin: new kakao.maps.Point(705, 114),
				offset: new kakao.maps.Point(13, 46)
			}
		);
		
		// 마커를 생성합니다
		marker = new kakao.maps.Marker({
			image : markImage,
			position: mapCenter
		});
		
			var infowindow = new kakao.maps.InfoWindow({
			content: "<div style='width:150px;text-align:center;padding:6px 0;'>"+daddr+"</div>"
		});
			
		infowindow.open(map, marker);
		
		//지도에 클릭 이벤트를 등록합니다
		kakao.maps.event.addListener(map, 'click', function(mouseEvent){
			// 클릭한 위치의 좌표입니다 
			var position = mouseEvent.latLng;
			// 지도 위에 로드뷰 도로 오버레이가 추가된 상태이면
			if(overlayOn) {
				// 클락한 위치를 기준으로 로드뷰를 설정합니다
				toggleRoadview(position);
			}
		});
		
	}
		
	var markers;
	var info = document.querySelector("#info");

	$.ajax({
		type: "get",
		url: "/haruter/findlibrarys",
		success:function(res){
			for (var i=0; i < res.length; i++) {
				markers = new kakao.maps.Marker({
					map: map, // 마커를 표시할 지도
					position: new kakao.maps.LatLng(res[i].lib_lat, res[i].lib_lot), // 마커를 표시할 위치
					title : res[i].lib_nm // 마커의 타이틀, 마커에 마우스를 올리면 타이틀이 표시됩니다
				});
				clickMakers(res[i].lib_nm)
			}
		}
	})
	// 마커에 클릭이벤트를 등록합니다
	function clickMakers(lib_nm) {
		kakao.maps.event.addListener(markers, 'click', function() {
			$.ajax({
				type:"get",
				url:"/haruter/findlibraryinfo?lib_nm="+lib_nm,
				success: function (res) {
					let str = `
								<div id="library_div">
									<h2> \${res.lib_nm} </h2>
									<div id="library_title">
									<h4> 주소 : \${res.lib_addr} </h4>
									<h4> Tel : \${res.lib_call}</h4>
									</div>
									<table class="library_body" border="1">
										<tr>
											<th>유형</th>
											<th>휴무일</th>
											<th>운영시작시간</th>
											<th>운영종료시간</th>
											<th>열람좌석수</th>
											<th>자료수(도서)</th>
											<th>대출가능권수</th>
										</tr>
										<tr>
											<td>\${res.lib_ctgry}</td>
											<td>\${res.lib_tcbiz}</td>
											<td>\${res.lib_start_time}</td>
											<td>\${res.lib_end_time}</td>
											<td>\${res.lib_seat}개</td>
											<td>\${res.lib_data}권</td>
											<td>\${res.lib_loan_cnt}권</td>
										</tr>
									</table>
								</div>`
					info.innerHTML = str;
				}
			})
		});
	}
	// 전달받은 좌표(position)에 가까운 로드뷰의 파노라마 ID를 추출하여
	// 로드뷰를 설정하는 함수입니다
	function toggleRoadview(position){
		rvClient.getNearestPanoId(position, 40, function(panoId) {
			// 파노라마 ID가 null 이면 로드뷰를 숨깁니다
			if (panoId === null) {
				toggleMapWrapper(true, position);
			} else {
			toggleMapWrapper(false, position);
	
				// panoId로 로드뷰를 설정합니다
				rv.setPanoId(panoId, position);
			}
		});
	}
	
	// 지도를 감싸고 있는 div의 크기를 조정하는 함수입니다
	function toggleMapWrapper(active, position) {
		if (active) {
	
			// 지도를 감싸고 있는 div의 너비가 100%가 되도록 class를 변경합니다 
			container.className = '';
	
			// 지도의 크기가 변경되었기 때문에 relayout 함수를 호출합니다
			map.relayout();
	
			// 지도의 너비가 변경될 때 지도중심을 입력받은 위치(position)로 설정합니다
			map.setCenter(position);
		} else {
	
			// 지도만 보여지고 있는 상태이면 지도의 너비가 50%가 되도록 class를 변경하여
			// 로드뷰가 함께 표시되게 합니다
			if (container.className.indexOf('view_roadview') === -1) {
				container.className = 'view_roadview';
	
				// 지도의 크기가 변경되었기 때문에 relayout 함수를 호출합니다
				map.relayout();
	
				// 지도의 너비가 변경될 때 지도중심을 입력받은 위치(position)로 설정합니다
				map.setCenter(position);
			}
		}
	}
	// 지도 위의 로드뷰 도로 오버레이를 추가,제거하는 함수입니다
	function toggleOverlay(active) {
		if (active) {
			overlayOn = true;
			// 지도 위에 로드뷰 도로 오버레이를 추가합니다
			map.addOverlayMapTypeId(kakao.maps.MapTypeId.ROADVIEW);

			// 지도 위에 마커를 표시합니다
			marker.setMap(map);

			// 마커의 위치를 지도 중심으로 설정합니다 
			marker.setPosition(map.getCenter());

			// 로드뷰의 위치를 지도 중심으로 설정합니다
			toggleRoadview(map.getCenter());
		} else {
			overlayOn = false;

			// 지도 위의 로드뷰 도로 오버레이를 제거합니다
			map.removeOverlayMapTypeId(kakao.maps.MapTypeId.ROADVIEW);

			// 지도 위의 마커를 제거합니다
			marker.setMap(null);
		}
	}
	
	// 지도 위의 로드뷰 버튼을 눌렀을 때 호출되는 함수입니다
	function setRoadviewRoad() {
		var control = document.getElementById('roadviewControl');
		// 버튼이 눌린 상태가 아니면
		if (control.className.indexOf('active') === -1) {
			control.className = 'active';
			
			// 로드뷰 도로 오버레이가 보이게 합니다
			toggleOverlay(true);
		} else {
			control.className = '';
			
			// 로드뷰 도로 오버레이를 제거합니다
			toggleOverlay(false);
		}
	}
	
	// 로드뷰에서 X버튼을 눌렀을 때 로드뷰를 지도 뒤로 숨기는 함수입니다
	function closeRoadview() {
		position = marker.getPosition();
		toggleMapWrapper(true, position);
	}

</script>