package kr.or.ddit.service.bmk;

import java.io.IOException;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

import javax.annotation.Resource;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Service;

import kr.or.ddit.controller.file.UploadFileUtils;
import kr.or.ddit.mapper.FileMapper;
import kr.or.ddit.mapper.bmk.HarustroyMapper;
import kr.or.ddit.vo.FileVO;
import kr.or.ddit.vo.bmk.BoardVO;

@Service
public class HarustroyServiceImpl implements IHarustoryService {

	@Resource(name="uploadImg")
	private String uploadImg;
	
	@Autowired
	private HarustroyMapper harustroyMapper;
	
	@Autowired
	private FileMapper fileMapper;
	
	@Override
	public List<BoardVO> boardList(BoardVO vo) {	
		return harustroyMapper.boardList(vo);
	}

	@Override
	public int storyInsert(BoardVO boardVO) {
		return harustroyMapper.storyInsert(boardVO);
	}

	@Override
	public Map<String,Object> boardOne(BoardVO vo) {
		Map<String,Object> mvo = new HashMap<>();
		int result = harustroyMapper.upHit(vo.getBoard_no());
		BoardVO bvo = harustroyMapper.boardOne(vo);
		List<FileVO> fvo = fileMapper.getFiles(bvo.getUa_no());
		if(result > 0 && bvo != null && fvo != null) {
			mvo.put("board", bvo);
			mvo.put("file", fvo);			
		}
		return mvo;
	}

	@Override
	public int updateHarustory(BoardVO boardVO) {
		return harustroyMapper.updateHarustory(boardVO);
	}

	@Override
	public String insertFeed(BoardVO bvo) throws IOException {
		String status = "";
		List<FileVO> result = UploadFileUtils.uploadFile(uploadImg, bvo.getImgFile(), "BOARD", bvo.getFilters());
		if(result.size() > 0) {
			String uaNo = fileMapper.getUaNo();
			int fileResult = 0;
			bvo.setUa_no(uaNo);
			for(FileVO vo : result) {
				vo.setUa_regist_id(bvo.getAe_id());
				vo.setUa_no(uaNo);
				fileResult += fileMapper.filesFilterInsert(vo);
			}
			if(fileResult > 0) {
				int boardResult = harustroyMapper.storyInsert(bvo);
				if(boardResult > 0) {
					status = "OK"; 						
				}else {
					status = "FAIL";
				}
			}
		}
	
		return status;
	}

	@Override
	public String deleteHarustory(BoardVO vo) {
		String status = "";
		int result1 = fileMapper.deleteFile(vo.getUa_no());
		int result2 = harustroyMapper.deleteHarustory(vo);
		
		if(result1 > 0 && result2 > 0) {
			status = "OK";
		}else {
			status = "FAIL";
		}
		return status;
	}

	@Override
	public String likeCehck(BoardVO vo) {
		String ynCheck = harustroyMapper.likeCehck(vo);
		int result = 0;
		if(ynCheck == null || ynCheck.trim().equals("")) {
			result += harustroyMapper.likeAdd(vo);
		}else if(ynCheck.trim().equals("Y")) {
			result += harustroyMapper.likeN(vo);
		}else if(ynCheck.trim().equals("N")) {
			result += harustroyMapper.likeY(vo);
		}
		String yn = "";
		if(result > 0) {
			yn = harustroyMapper.likeCehck(vo);
		}
		return yn;
	}

}
