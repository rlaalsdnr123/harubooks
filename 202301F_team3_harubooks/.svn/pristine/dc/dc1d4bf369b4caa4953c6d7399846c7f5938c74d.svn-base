package kr.or.ddit.controller.omn.sales;

import java.util.HashMap;
import java.util.List;
import java.util.Map;

import javax.inject.Inject;

import org.apache.commons.lang3.StringUtils;
import org.springframework.security.access.prepost.PreAuthorize;
import org.springframework.stereotype.Controller;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.ResponseBody;

import kr.or.ddit.service.omn.sales.IMngSalesService;
import kr.or.ddit.vo.omn.MngPaginationInfoVO;
import kr.or.ddit.vo.omn.SalesVO;
import lombok.extern.slf4j.Slf4j;

@Slf4j
@Controller
@RequestMapping("/mng/sales")
@PreAuthorize("hasRole('ROLE_ADMIN')")
public class MngSalesController {
	
	@Inject
	private IMngSalesService service;
	
	@ResponseBody
	@GetMapping(value = "/selectSalesList", produces = "application/json;charset=utf-8")
	public Map<String, Object> selectSalesList(
			@RequestParam(name = "page", required = false, defaultValue = "1") int currentPage,
			@RequestParam(required = false, defaultValue = "no") String searchType,
			@RequestParam(required = false, defaultValue = "") String searchWord,
			String order_no){
		
		log.info("selectSalesList()실행");
		
		Map<String, Object> map = new HashMap<>();
		MngPaginationInfoVO<SalesVO> pagingVO = new MngPaginationInfoVO<>();
		
		if(StringUtils.isNotBlank(searchWord)) {
			pagingVO.setSearchType(searchType);
			pagingVO.setSearchWord(searchWord);
			map.put("searchType", searchType);
			map.put("searchWord", searchWord);
		}
		
		pagingVO.setCurrentPage(currentPage);
		pagingVO.setOrder_no(order_no);
		int totalRecord = service.salesCount(pagingVO);
		pagingVO.setTotalRecord(totalRecord);
		int allRecord = service.salesAllCount(order_no);
		pagingVO.setAllRecord(allRecord);
		List<SalesVO> dataList = service.selectSalesList(pagingVO);
		pagingVO.setDataList(dataList);
		map.put("pagingVO", pagingVO);
		
		return map;
	}
	
	@ResponseBody
	@GetMapping(value = "/salesList", produces = "application/json;charset=utf-8")
	public List<SalesVO> salesList(){
		log.info("salesList()실행");
		return service.salesList();
	}
	
	@ResponseBody
	@GetMapping(value = "/bestPublisher", produces = "application/json;charset=utf-8")
	public List<SalesVO> bestPublisher(SalesVO salesVO){
		log.info("bestPublisher()실행");
		return service.bestPublisher(salesVO);
	}
	
	@ResponseBody
	@GetMapping(value = "/bestBooks", produces = "application/json;charset=utf-8")
	public List<SalesVO> bestBooks(SalesVO salesVO){
		log.info("bestBooks()실행");
		return service.bestBooks(salesVO);
	}
	
	@ResponseBody
	@GetMapping(value = "/monthlySales", produces = "application/json;charset=utf-8")
	public List<SalesVO> monthlySales(SalesVO salesVO){
		log.info("monthlySales()실행");
		return service.monthlySales(salesVO);
	}
	
	@ResponseBody
	@GetMapping(value = "/monthlyCnt", produces = "application/json;charset=utf-8")
	public List<SalesVO> monthlyCnt(SalesVO salesVO){
		log.info("monthlyCnt()실행");
		return service.monthlyCnt(salesVO);
	}
}
