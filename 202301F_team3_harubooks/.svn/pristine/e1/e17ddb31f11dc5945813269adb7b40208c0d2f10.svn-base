<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper
  PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
  "https://mybatis.org/dtd/mybatis-3-mapper.dtd">

 <mapper namespace="kr.or.ddit.mapper.jhs.ChattingMapper">
 
  	<!-- 채팅방 타입 -->
  	<sql id="chatType">
		<if test="searchType != null and searchType == 'order-inq'">
			order by c.cr_no
		</if>
		<if test="searchType != null and searchType == 'order-recent'">
			order by c.cr_no desc
		</if>
	</sql>
	
	<!--  채팅방 검색 -->
	<sql id="chatSearch">
		<if test="searchWord != null and searchSelect == 'chatting_no'">
			where  a.cr_no like '%${searchWord}%'
		</if>
		<if test="searchWord != null and searchSelect == 'chatting_title'">
			where  a.cr_nm like '%${searchWord}%'
		</if>
	</sql>
	
	<!-- 채팅방 타입 -->
  	<sql id="chatBoardType">
		<if test="searchType != null and searchType == 'order-inq'">
			order by c.board_no
		</if>
		<if test="searchType != null and searchType == 'order-recent'">
			order by c.board_no desc
		</if>
	</sql>
	
	<!--  모집게시판 검색 -->
	<sql id="chatBoardSearch">
		<if test="searchWord != null and searchSelect == 'chatting_no'">
			and  b.cr_no like '%${searchWord}%'
		</if>
		<if test="searchWord != null and searchSelect == 'chatting_title'">
			and  a.board_title like '%${searchWord}%'
		</if>
	</sql>
 
 	<!-- 채팅방 리스트 가져오기 -->
 	<select id="getChatList" resultType="chatRoomVO" parameterType="chatRoomVO">
		   select
	 			  cr_no
	 			, cr_estbl_ymd
	 			, cr_last_actvtn_ymd
	 			, cr_pw
	 			, cr_nm
	 			, cr_info
				, cr_max_nope
				, cr_nope
				, cr_cntn_nope
				, ccg_r003
				, ae_id
				, cr_temp_no
			from (
			    select
			        c.*,
			        row_number() over ( <include refid="chatType"/>) rnum
			    from (
			        select
			 			  cr_no
			 			, cr_estbl_ymd
			 			, cr_last_actvtn_ymd
			 			, cr_pw
			 			, cr_nm
			 			, cr_info
						, cr_max_nope
						, cr_nope
						, cr_cntn_nope
						, ccg_r003
						, ae_id
						, cr_temp_no
			        from chat_room a
			        <include refid="chatSearch"/>
			    ) c
			) d
			<![CDATA[
			where 
				d.rnum >= (#{currentPage} * #{screenSize}) - (#{screenSize} - 1) and d.rnum <= (#{currentPage} * #{screenSize}) 	
			]]>
 	</select>
 
 	<!-- 채팅방 하나 가져오기 -->
 	<select id="getChatOne" parameterType="chatRoomVO" resultType="chatRoomVO">
 		select
			  cr_no
 			, cr_estbl_ymd
 			, cr_last_actvtn_ymd
 			, cr_pw
 			, cr_nm
 			, cr_info
			, cr_max_nope
			, cr_nope
			, cr_cntn_nope
			, ccg_r003
			, ae_id
			, cr_temp_no
		from
			chat_room
		where
			cr_no = #{cr_no}	
 	</select>
 
 	<!-- 채팅방 생성 -->
 	<insert id="insertChat" parameterType="chatRoomVO">
 	 	<selectKey keyProperty="cr_no" resultType="string" order="BEFORE"> 
	 		select 'CR' || lpad(seq_cr.nextval, 10,'0') from dual
	 	</selectKey>
 		insert into chat_room(
 			  cr_no
 			, cr_estbl_ymd
 			, cr_last_actvtn_ymd
 			, cr_pw
 			, cr_nm
 			, cr_info
			, cr_max_nope
			, cr_nope
			, cr_cntn_nope
			, ccg_r003
			, ae_id
			, cr_temp_no
 		)values(
 			  #{cr_no}
 			, sysdate
 			, '0'
 			, #{cr_pw}
 			, #{cr_nm}
 			, #{cr_info}
 			, #{cr_max_nope}
 			, 1
 			, 0
 			, #{ccg_r003}
 			, #{ae_id}
 			, seq_cr.currval
 		)
 	</insert>
 	
 	<!-- 채팅 멤버 방장 넣기 -->
 	<insert id="insertChatMem" parameterType="chatRoomVO">
 		insert into chat_mem(
 			  cr_no
			, ae_id
			, cn_cntn_yn
			, cm_master_yn
			, cm_out_yn
			, cm_join_ymd
		)values(
			  #{cr_no}
			, #{ae_id}
			, 'N'
			, 'Y'
			, 'N'
			, to_char(sysdate, 'yy/mm/dd hh24:mi:ss')
		)	
 	</insert>
 	
 	<!-- 비밀번호 확인 -->
 	<select id="checkPw" parameterType="chatRoomVO" resultType="string">
 		select 
		    cr_no
		from
		    chat_room
		where
		    cr_no = #{cr_no}
		and
		    cr_pw = #{cr_pw}
 	</select>
 	
 	<!-- 채팅방 사용자인지 확인 -->
 	<select id="checkUser" parameterType="chatRoomVO" resultType="chatMemVO">
	 	select 
		   cr_no
		 , ae_id
		 , cn_cntn_yn
		 , cm_master_yn
		 , cm_join_ymd
		 , cm_out_yn
		from
		    chat_mem
		where
		    cr_no = #{cr_no}
		and
		    ae_id = #{ae_id}
 	</select>
 	
 	<!-- 채팅방에 사용자 넣기 -->
 	<insert id="chattingRoomIn" parameterType="chatRoomVO">
 		insert into chat_mem(
 			  cr_no
			, ae_id
			, cn_cntn_yn
			, cm_master_yn
			, cm_out_yn
			, cm_join_ymd
		) values(
			  #{cr_no}
			, #{ae_id}
			, 'N'
			, 'N'
			, 'N'
			, to_char(sysdate, 'yy/mm/dd hh24:mi:ss')
		)
 	</insert>
 	
 	<!-- 현재 인원 수 증가 -->
 	<update id="addChatNope" parameterType="chatRoomVO">
 		update chat_room set
 			cr_nope = cr_nope + 1
 		where 
 			cr_no = #{cr_no}
 	</update>
 	
 	<!-- 채팅 사용자 정보 가져오기 -->
 	<select id="getChatMem" parameterType="chatMemVO" resultType="chatMemVO">
 		select
 			  a.cr_no
 			, a.ae_id
 			, a.cn_cntn_yn
 			, a.cm_master_yn
 			, a.cm_join_ymd
 			, a.cm_out_yn
 			, b.mem_profile
 			, b.mem_nicknm
 		from
 			chat_mem a, com_member b
 		where
 			a.ae_id = b.ae_id
 		and
 			a.cr_no = #{cr_no}
 		and 
 			a.ae_id = #{ae_id}
 	</select>
 	
 	<!-- 해당 모든 채팅방의 사용자 정보 가져오기 -->
 	<select id="getChatMemList" parameterType="chatMemVO" resultType="chatMemVO">
 		select
 			  a.cr_no
 			, a.ae_id
 			, a.cn_cntn_yn
 			, a.cm_master_yn
 			, a.cm_join_ymd
 			, a.cm_out_yn
 			, b.mem_profile
 			, b.mem_nicknm
 		from
 			chat_mem a, com_member b
 		where
 			a.ae_id = b.ae_id
 		and
 			a.cr_no = #{cr_no}
 		and
 			a.cm_out_yn = 'N'
 	</select>	
 	
 	<!-- 채팅 사용자 삭제 -->
 	<delete id="deleteChatMem" parameterType="chatRoomVO">
		delete from
			chat_mem
		where
			cr_no = #{cr_no}
 	</delete>
 	
 	<!-- 채팅방 삭제 -->
  	<delete id="deleteChatRoom" parameterType="chatRoomVO">
		delete from
			chat_room
		where
			cr_no = #{cr_no}
 	</delete>
 	
 	<!-- 채팅 내용 삭제 -->
  	<delete id="deleteChatting" parameterType="chatRoomVO">
		delete from
			chatting
		where
			cr_no = #{cr_no}
 	</delete>
 	
 	<!-- 채팅방 수정 -->
 	<update id="updateChatRoom" parameterType="chatRoomVO">
 	 	update chat_room set
 			  cr_nm = #{cr_nm}
 			, cr_info = #{cr_info}
 			, cr_pw = #{cr_pw}
 			, cr_max_nope = #{cr_max_nope}
 			, ccg_r003 = #{ccg_r003}
 		where 
 			cr_no = #{cr_no}	
 	</update>	
 	
 	<!-- 채팅 멤버 상태 변경 - 들어가기-->
 	<update id="updateChatMemState" parameterType="chatMemVO">
 		update chat_mem set
 			cn_cntn_yn = 'Y'
 		where 
 			cr_no = #{cr_no}
 		and
 			ae_id = #{ae_id}
 	</update>
 	
 	<!-- 채팅방 상태 변경 - 들어가기 -->
 	<update id="updateChatRoomState" parameterType="chatMemVO">
 		update chat_room set
 			cr_cntn_nope = cr_cntn_nope + 1
 		where 
 			cr_no = #{cr_no}
 	</update>
 	
 	<!-- 채팅 멤버 상태 변경 - 나가기 -->
 	<update id="updateChatMemStateDown" parameterType="chatMemVO">
 		update chat_mem set
 			cn_cntn_yn = 'N'
 		where 
 			cr_no = #{cr_no}
 		and
 			ae_id = #{ae_id}
 	</update>
 	
 	 <!-- 채팅방 상태 변경 - 나가기 -->
 	<update id="updateChatRoomStateDown" parameterType="chatMemVO">
 		update chat_room set
 			  cr_cntn_nope = cr_cntn_nope - 1
 			, cr_last_actvtn_ymd = sysdate
 		where 
 			cr_no = #{cr_no}
 	</update>
 	
 	<!-- 해당 채팅방의 500개의 최근 채팅 내용 가져오기 -->
 	<select id="getChatting" parameterType="string" resultType="chattingVO"> 	
		select 
		    chat_no
		  , cr_no
		  , ae_id
		  , chat_message
		  , chat_wrt_ymd
		  , mem_nicknm
		  , mem_profile
		  , chat_type
		  , chat_to
		  , chat_current_time
		from(
		    select
		    c.*,
		    row_number() over (order by chat_no desc) rnum
		from 
		(
		    select 
		         chat_no
		       , cr_no
		       , ae_id
		       , chat_message
		       , chat_wrt_ymd
		       , mem_nicknm
		       , mem_profile
		       , chat_type
		       , chat_to
		       , chat_current_time
		    from
		        chatting
		    where
		        cr_no = #{cr_no}
		) c
		)d
		where 
		<![CDATA[
		    d.rnum >= 1 and d.rnum <= 500
		]]> 
 	</select>
 	
 	
 	<!--  채팅 내용 저장 -->
 	<insert id="insertChatInfo" parameterType="chatMemVO">
 	 	<selectKey keyProperty="chat_no" resultType="string" order="BEFORE"> 
	 		select 'CH' || lpad(seq_ch.nextval, 10,'0') from dual
	 	</selectKey>
 	 	insert into chatting(
			  chat_no
			, cr_no
			, ae_id
	 		, chat_message
			, chat_wrt_ymd
			, mem_nicknm
			, mem_profile
			, chat_type
			, chat_to
			, chat_current_time
		) values(
			  #{chat_no}
			, #{cr_no}
			, #{ae_id}
	 		, #{chat_message}
			, to_char(sysdate, 'yy/mm/dd hh24:mi:ss')
			, #{mem_nicknm}
			, #{mem_profile}
			, #{chat_type}
			, #{chat_to}
			, #{chat_current_time}
		)	
 	</insert>
 	
 	<!-- 사용자 강퇴 및 강퇴한 사용자를 파악하여 또 못들어오게 한다 -->
 	<update id="outUser" parameterType="chatMemVO">
 		update chat_mem set
 			cm_out_yn = 'Y'
 		where 
 			cr_no = #{cr_no}
 		and
 			ae_id = #{ae_id}
 	</update>

	<!-- 방의 현재 인원 수를 줄인다 -->
 	<update id="outRoom" parameterType="chatMemVO">
 		update chat_room set
 			cr_nope = cr_nope - 1
 		where 
 			cr_no = #{cr_no} 	
 	</update>

 	<!-- 채팅방에 나간 사용자의 채팅 내용이 사라진다 -->
 	<delete id="deleteUserChatting" parameterType="chatMemVO">
 		delete from
			chatting
		where
			cr_no = #{cr_no}
		and
			ae_id = #{ae_id}
 	</delete>
 	
 	<!-- 채팅방에 나가면 해당 멤버가 채팅 멤버에서 사라진다. -->
 	<delete id="deleteUser" parameterType="chatMemVO">
 		delete from
			chat_mem
		where
			cr_no = #{cr_no}
		and
			ae_id = #{ae_id}
 	</delete>
 	
 	<!-- 내가 개설한 채팅방 가져오기 -->
 	<select id="getChatRoomNo" parameterType="string" resultType="chatRoomVO">
 		select
 			  cr_no
			, cr_estbl_ymd
			, cr_last_actvtn_ymd
			, cr_pw
			, cr_nm
			, cr_info
			, cr_max_nope
			, cr_nope
			, cr_cntn_nope
			, ccg_r003
			, ae_id
			, cr_temp_no
		from
			chat_room
		where
			ae_id = #{ae_id}
 	</select>
 	
 	<!-- 모임 게시판 생성 -->
 	<insert id="createChatBoard" parameterType="boardVO">
 		<selectKey keyProperty="board_no" resultType="string" order="BEFORE"> 
	 		select 'BO' || lpad(seq_bo.nextval, 10,'0') from dual
	 	</selectKey>
 			insert into board (
	 				board_no
	 	  		  , board_title
	 	  		  , board_content
	 	  		  , wrt_ymd
	 	  		  , last_mdfcn_ymd
	 	  		  , inq_cnt
	 	  		  , ccg_b004
	 	  		  , ua_no
	 	  		  , ae_id
	 	 	)values (
	  			  	#{board_no}
	  			  , #{board_title}
	  			  , #{board_content}
			  	  , sysdate
			  	  , 0
				  , 0
			      , #{ccg_b004}
			  	  , 0
			  	  , #{ae_id}
			)
 	</insert>
 	
 	<!-- 모임 게시판 테이블도 생성 -->
 	<insert id="createDedateBoard" parameterType="boardVO">
		insert into book_dedate_board (
 				board_no
 	  		  , cr_no
 	  		  , cr_temp_no
		)values (
  			  	#{board_no}
  			  , #{cr_no}
  			  , #{cr_temp_no}
  		) 		
 	</insert>
 	
 	<!-- 모임 게시판 불러오기  -->
 	<select id="getChatBoardList" parameterType="boardVO" resultType="boardVO">
 			select
			     d.board_no
			   , d.board_title
			   , d.board_content
			   , d.wrt_ymd
			   , d.last_mdfcn_ymd
		       , d.inq_cnt
			   , d.ccg_b004
		       , d.ua_no
			   , d.ae_id
			   , d.cr_no
			   , d.cr_temp_no
			from (
			    select
			        c.*,
			        row_number() over ( <include refid="chatBoardType"/>) rnum
			    from (
			        select
					     a.board_no
					   , a.board_title
					   , a.board_content
					   , a.wrt_ymd
					   , a.last_mdfcn_ymd
				       , a.inq_cnt
					   , a.ccg_b004
				       , a.ua_no
					   , a.ae_id
					   , b.cr_no
					   , b.cr_temp_no
			        from 
			        	board a, book_dedate_board b
			        where
						a.board_no = b.board_no
					and
                        a.ccg_b004 = '모임게시판'
			        <include refid="chatBoardSearch"/>
			    ) c
			) d
			<![CDATA[
			where 
				d.rnum >= (#{currentPage} * #{screenSize1}) - (#{screenSize1} - 1) and d.rnum <= (#{currentPage} * #{screenSize1}) 	
			]]>
	</select>
	
	<!-- 모임 게시판 하나 가져오기 -->
	<select id="getChatBoardOne" parameterType="boardVO" resultType="boardVO">
		select
		     a.board_no
		   , a.board_title
		   , a.board_content
		   , a.wrt_ymd
		   , a.last_mdfcn_ymd
	       , a.inq_cnt
		   , a.ccg_b004
	       , a.ua_no
		   , a.ae_id
		   , b.cr_no
		   , b.cr_temp_no
		   , c.mem_profile
		   , c.mem_nicknm
        from 
        	board a, book_dedate_board b, com_member c
        where
			a.board_no = b.board_no
		and
			a.ae_id = c.ae_id
		and
			a.board_no = #{board_no}
	</select>
	
	<!-- 조회수 업데이트 -->
	<update id="updateCnt" parameterType="boardVO">
		update board set
 			inq_cnt = inq_cnt + 1 
 		where 
 			board_no = #{board_no}
	</update>
	
	<!-- 모임 게시판 댓글 리스트 가져오기 -->
	<select id="getChatBoardReplyList" parameterType="boardVO" resultType="replyVO">
	       select
                  d.reply_no
                , d.reply_content
                , d.reply_wrt_ymd
                , d.reply_mdfcn_ymd
                , d.reply_type
                , d.ccg_r003
                , d.board_no
                , d.ae_id
                , d.mem_profile
                , d.mem_nicknm
                , (select count(*) from reply where reply_type = d.reply_no) AS reply_count
			from (
			    select
			        c.*,
			        row_number() over ( order by c.reply_no desc ) rnum
			    from (
                    select
                          a.reply_no
                        , a.reply_content
                        , a.reply_wrt_ymd
                        , a.reply_mdfcn_ymd
                        , a.reply_type
                        , a.ccg_r003
                        , a.board_no
                        , a.ae_id
                        , b.mem_profile
                        , b.mem_nicknm
                    from
                        reply a, com_member b
                    where
                        a.ae_id = b.ae_id
                    and 
                        a.board_no = #{board_no}
                    and
                        a.reply_type = 'NO'
			    ) c
			) d
			<![CDATA[ 
			where 
				d.rnum >= (#{currentPage} * #{screenSize}) - (#{screenSize} - 1) and d.rnum <= (#{currentPage} * #{screenSize}) 	
			]]>
	</select>
	
	<!-- 채팅 입력, 댓글 저장 -->
	<insert id="insetChat" parameterType="replyVO">
		<selectKey keyProperty="reply_no" resultType="string" order="BEFORE"> 
	 		select 'RE' || LPAD(seq_re.nextval, 10, '0') from dual
	 	</selectKey>
		insert into 
			reply(
				reply_no
			  , reply_content
			  , reply_wrt_ymd
              , reply_mdfcn_ymd
              , reply_type
           	  , ccg_r003
              , board_no
              , ae_id  
			)values(
			    #{reply_no}
			  , #{reply_content}
			  , sysdate
			  , '0'
			  , #{reply_type}
			  , #{ccg_r003}
			  , #{board_no}
			  , #{ae_id}
			)
	</insert>
	
	<!-- 대댓글 가져오기 -->
	<select id="getChatBoardSubReplyList" parameterType="replyVO" resultType="replyVO">
			select
                  d.reply_no
                , d.reply_content
                , d.reply_wrt_ymd
                , d.reply_mdfcn_ymd
                , d.reply_type
                , d.ccg_r003
                , d.ae_id
                , d.mem_profile
                , d.mem_nicknm
			from (
			    select
			        c.*,
			        row_number() over ( order by c.reply_no ) rnum
			    from (
                    select
                          a.reply_no
                        , a.reply_content
                        , a.reply_wrt_ymd
                        , a.reply_mdfcn_ymd
                        , a.reply_type
                        , a.ccg_r003
                        , a.ae_id
                        , b.mem_profile
                        , b.mem_nicknm
                    from
                        reply a, com_member b
                    where
                        a.ae_id = b.ae_id
                    and
                        a.reply_type = #{reply_type}
			    ) c
			) d
			<![CDATA[ 
			where 
				d.rnum >= (#{currentPage} * #{subReplyScreenSize}) - (#{subReplyScreenSize} - 1) and d.rnum <= (#{currentPage} * #{subReplyScreenSize}) 	
			]]>
	</select>
	
	<!-- 모임 게시판 수정 -->
	<update id="updateChatBoard" parameterType="boardVO">
		update board set
    		board_title = #{board_title},
   			board_content = #{board_content},
   			last_mdfcn_ymd = sysdate
   		 where 
   			board_no = #{board_no}
   		 and
   		 	ae_id = #{ae_id}
	</update>
	
	<!-- 모임 게시판 삭제 -->	
 	<delete id="deleteChatBoard" parameterType="boardVO">
		delete from
			board
		where
			board_no = #{board_no}
		and
			ae_id = #{ae_id}
	</delete>
	
	<!-- 모임 게시판 모든 댓글 삭제 -->
	<delete id="deleteChatReply" parameterType="boardVO">
		delete from
			reply
		where
			board_no = #{board_no}
	</delete>
	
	<!-- 모임 게시판(DedateBoard) 삭제 -->
	<delete id="deleteChatDedateBoard" parameterType="boardVO">
		delete from
			book_dedate_board
		where
			board_no = #{board_no}
	</delete>
	
	<!-- 댓글 및 대댓글 삭제 -->
 	<delete id="chatBoatdReplyDelete" parameterType="replyVO">
 		delete from
			reply
		where
			reply_no = #{reply_no}
		or
			reply_type = #{reply_no}
 	</delete>
 	
 	<!-- 댓글 및 대댓글 수정 -->
 	<update id="chatBoatdReplyUpdate" parameterType="replyVO">
 		 update reply set
    		reply_content = #{reply_content},
   			reply_mdfcn_ymd = sysdate
   		 where 
   			reply_no = #{reply_no}
   		 and
   		 	ae_id = #{ae_id}
	</update> 
 	
 	<!-- 채팅방 리스트 가져오기 -->
 	<select id="getMyChatList" resultType="chatRoomVO" parameterType="chatRoomVO">
		   select
	 			  cr_no
	 			, cr_estbl_ymd
	 			, cr_last_actvtn_ymd
	 			, cr_pw
	 			, cr_nm
	 			, cr_info
				, cr_max_nope
				, cr_nope
				, cr_cntn_nope
				, ccg_r003
				, ae_id
				, cr_temp_no
			from (
			    select
			        c.*,
			        row_number() over ( <include refid="chatType"/>) rnum
			    from (
			        select
			 			  a.cr_no
			 			, a.cr_estbl_ymd
			 			, a.cr_last_actvtn_ymd
			 			, a.cr_pw
			 			, a.cr_nm
			 			, a.cr_info
						, a.cr_max_nope
						, a.cr_nope
						, a.cr_cntn_nope
						, a.ccg_r003
						, a.ae_id
						, a.cr_temp_no
			        from chat_room a, chat_mem b
			        <include refid="chatSearch"/>
					and
					    b.ae_id = #{ae_id}
					and
					    b.cm_out_yn = 'N'
					and
					    b.cr_no = a.cr_no
			    ) c
			) d
			<![CDATA[
			where 
				d.rnum >= (#{currentPage} * #{screenSize}) - (#{screenSize} - 1) and d.rnum <= (#{currentPage} * #{screenSize}) 	
			]]>
 	</select>
 </mapper>