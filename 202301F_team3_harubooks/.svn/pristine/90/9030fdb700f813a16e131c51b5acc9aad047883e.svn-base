package kr.or.ddit.controller.omn.books;

import java.io.File;
import java.io.IOException;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

import javax.annotation.Resource;
import javax.inject.Inject;

import org.apache.commons.io.FilenameUtils;
import org.apache.commons.lang3.StringUtils;
import org.springframework.security.access.prepost.PreAuthorize;
import org.springframework.security.core.context.SecurityContextHolder;
import org.springframework.stereotype.Controller;
import org.springframework.web.bind.annotation.DeleteMapping;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.PutMapping;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.ResponseBody;
import org.springframework.web.multipart.MultipartFile;

import kr.or.ddit.controller.file.UploadFileUtils;
import kr.or.ddit.service.FileService;
import kr.or.ddit.service.omn.books.IMngBooksService;
import kr.or.ddit.vo.FileVO;
import kr.or.ddit.vo.omn.MngBooksVO;
import kr.or.ddit.vo.omn.MngPaginationInfoVO;
import lombok.extern.slf4j.Slf4j;

@Slf4j
@Controller
@RequestMapping("/mng/books")
@PreAuthorize("hasRole('ROLE_ADMIN')")
public class MngBooksController {
	
	// 첨부 파일 저장 경로 - root-context.xml에 설정
	@Resource(name="uploadImg")
	private String uploadPath;
	
	@Inject
	private IMngBooksService service;
	
	@Inject
	private FileService fileService;
	
	@ResponseBody
	@GetMapping(value = "/selectBooksList", produces = "application/json;charset=utf-8")
	public Map<String, Object> selectBooksList(
			@RequestParam(name = "page", required = false, defaultValue = "1") int currentPage,
			@RequestParam(required = false, defaultValue = "title") String searchType,
			@RequestParam(required = false, defaultValue = "") String searchWord,
			String book_no){
		
		log.info("selectBooksList()실행");
		
		Map<String, Object> map = new HashMap<>();
		MngPaginationInfoVO<MngBooksVO> pagingVO = new MngPaginationInfoVO<>();
		
		if(StringUtils.isNotBlank(searchWord)) {
			pagingVO.setSearchType(searchType);
			pagingVO.setSearchWord(searchWord);
			map.put("searchType", searchType);
			map.put("searchWord", searchWord);
		}
		
		pagingVO.setCurrentPage(currentPage);
		pagingVO.setBook_no(book_no);
		int totalRecord = service.booksCount(pagingVO);
		pagingVO.setTotalRecord(totalRecord);
		int allRecord = service.booksAllCount(book_no);
		pagingVO.setAllRecord(allRecord);
		List<MngBooksVO> dataList = service.selectBooksList(pagingVO);
		pagingVO.setDataList(dataList);
		map.put("pagingVO", pagingVO);
		
		return map;
	}
	
	@ResponseBody
	@GetMapping(value = "/booksInfo/{no}", produces = "application/json;charset=utf-8")
	public MngBooksVO booksInfo(@PathVariable("no") String book_no){
		log.info("booksInfo()실행");
		return service.booksInfo(book_no);
	}
	
	// 도서 정보 수정
	@ResponseBody
	@PutMapping(value = "", produces = "text/plain; charset=utf-8")
	public String booksUpdate(MngBooksVO mngBooksVO) throws IOException {
		log.info("booksUpdate()실행");
		
		// 수정한 파일 업로드
		if(mngBooksVO.getBook_file() != null) {
			MultipartFile bookFile = mngBooksVO.getBook_file();
			log.info("file.name" + bookFile.getOriginalFilename());	// 파일 이름
			String uploadedFileName = UploadFileUtils.uploadFile(uploadPath, bookFile.getOriginalFilename(), bookFile.getBytes());
			String savedName = uploadedFileName.substring(uploadedFileName.lastIndexOf("/") + 1) ;
			log.info("savedName" + savedName);	// 저장 이름 : uuid_파일 이름
			log.info("uploadedFileName : " + uploadedFileName);	// 저장 경로 + 저장 이름
			log.info("uploadPath : " + uploadPath);
			String destPath = uploadedFileName;
			log.info("destPath : " + destPath);
			String fileType = bookFile.getOriginalFilename().substring(bookFile.getOriginalFilename().lastIndexOf(".") + 1);// 확장자
			log.info("fileType : " + fileType);
			bookFile.transferTo(new File(destPath));
			log.info(FilenameUtils.getExtension(bookFile.getOriginalFilename()));	// 확장자 추출하는 방법
			log.info("파일 복사 성공");
			
			// 파일 업로드
			FileVO fileVO = new FileVO();
			fileVO.setUa_sn("1");
			fileVO.setUa_type("BOOKS");
			fileVO.setUa_path(destPath);
			fileVO.setUa_nm(bookFile.getOriginalFilename());
			fileVO.setUa_stre_nm(savedName);
			fileVO.setUa_file_type(fileType);
			fileVO.setUa_size(bookFile.getSize());
			String id = SecurityContextHolder.getContext().getAuthentication().getName();
			fileVO.setUa_regist_id(id);
			int cnt = fileService.fileInsert(fileVO);
			
			if(cnt > 0) {  // 파일 등록 성공
				mngBooksVO.setBook_cover("/upload/images/" + savedName);
			}
		}
		
		int cnt = service.booksUpdate(mngBooksVO);
		String result = "";
		if(cnt > 0) {
			result = "success";
		} else {
			result = "fail";
		}
		return result;
	}
	
	// 도서 정보 삭제
	@ResponseBody
	@DeleteMapping(value = "/booksDelete/{no}")
	public String booksDelete(@PathVariable("no") String book_no){
		log.info("booksDelete()실행");
		int cnt = service.booksDelete(book_no);
		String result = "";
		if(cnt > 0) {
			result = "success";
		} else {
			result = "fail";
		}
		return result;
	}
}
