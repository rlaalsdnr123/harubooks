package kr.or.ddit.controller.omn.books;

import java.io.File;
import java.io.IOException;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

import javax.annotation.Resource;
import javax.inject.Inject;

import org.apache.commons.io.FilenameUtils;
import org.apache.commons.lang3.StringUtils;
import org.springframework.stereotype.Controller;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.PostMapping;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.ResponseBody;
import org.springframework.web.multipart.MultipartFile;

import kr.or.ddit.controller.file.UploadFileUtils;
import kr.or.ddit.service.FileService;
import kr.or.ddit.service.omn.books.IPubBookRequestService;
import kr.or.ddit.vo.FileVO;
import kr.or.ddit.vo.omn.MngPaginationInfoVO;
import kr.or.ddit.vo.omn.NewBookRequestVO;
import lombok.extern.slf4j.Slf4j;

@Slf4j
@Controller
@RequestMapping("/pub/bookRequest")
public class PubBookRequestController {
	
	// 첨부 파일 저장 경로 - root-context.xml에 설정
	@Resource(name="uploadImg")
	private String uploadPath;
	
	@Inject
	private IPubBookRequestService service;
	
	@Inject
	private FileService fileService;
	
	@ResponseBody
	@GetMapping(value = "/requestList", produces = "application/json;charset=utf-8")
	public List<NewBookRequestVO> requestList(){
		log.info("requestList()실행");
		return service.requestList();
	}
	
	@ResponseBody
	@GetMapping(value = "selectRequestList", produces = "application/json;charset=utf-8")
	public Map<String, Object> selectRequestList(
			@RequestParam(name = "page", required = false, defaultValue = "1") int currentPage,
			@RequestParam(required = false, defaultValue = "id") String searchType,
			@RequestParam(required = false, defaultValue = "") String searchWord,
			String nbr_no){
		
		log.info("selectRequestList()실행");
		
		Map<String, Object> map = new HashMap<>();
		MngPaginationInfoVO<NewBookRequestVO> pagingVO = new MngPaginationInfoVO<>();
		
		if(StringUtils.isNotBlank(searchWord)) {
			pagingVO.setSearchType(searchType);
			pagingVO.setSearchWord(searchWord);
			map.put("searchType", searchType);
			map.put("searchWord", searchWord);
		}
		
		pagingVO.setCurrentPage(currentPage);
		pagingVO.setNbr_no(nbr_no);
		int totalRecord = service.requestCount(pagingVO);
		pagingVO.setTotalRecord(totalRecord);
		int allRecord = service.requestAllCount(nbr_no);
		pagingVO.setAllRecord(allRecord);
		List<NewBookRequestVO> dataList = service.selectRequestList(pagingVO);
		pagingVO.setDataList(dataList);
		map.put("pagingVO", pagingVO);
		
		return map;
	}
	
	// 도서 등록
	@ResponseBody
	@PostMapping(value = "", produces = "text/plain; charset=utf-8")
	public String bookRequestInsert(NewBookRequestVO newBookRequestVO) throws IOException {
		log.info("bookRequestInsert()실행");
		
		if(newBookRequestVO.getBook_file_cover() != null) {
			MultipartFile bookFileCover = newBookRequestVO.getBook_file_cover();
			log.info("file.name" + bookFileCover.getOriginalFilename());	// 파일 이름
			String uploadedFileName = UploadFileUtils.uploadFile(uploadPath, bookFileCover.getOriginalFilename(), bookFileCover.getBytes());
			String savedName = uploadedFileName.substring(uploadedFileName.lastIndexOf("/") + 1) ;
			log.info("savedName" + savedName);	// 저장 이름 : uuid_파일 이름
			log.info("uploadedFileName : " + uploadedFileName);	// 저장 경로 + 저장 이름
			log.info("uploadPath : " + uploadPath);
			String destPath = uploadedFileName;
			log.info("destPath : " + destPath);
			String fileType = bookFileCover.getOriginalFilename().substring(bookFileCover.getOriginalFilename().lastIndexOf(".") + 1);	// 확장자
			log.info("fileType : " + fileType);
			bookFileCover.transferTo(new File(destPath));
			log.info(FilenameUtils.getExtension(bookFileCover.getOriginalFilename()));	// 확장자 추출하는 방법
			log.info("파일 복사 성공");
			
			// 파일 업로드
			FileVO fileVO = new FileVO();
			fileVO.setUa_sn("1");
			fileVO.setUa_type("NEW_BOOK_REQUEST");
			fileVO.setUa_path(destPath);
			fileVO.setUa_nm(bookFileCover.getOriginalFilename());
			fileVO.setUa_stre_nm(savedName);
			fileVO.setUa_file_type(fileType);
			fileVO.setUa_size(bookFileCover.getSize());
			fileVO.setUa_regist_id("ex0033");	// 나중에 등록자 id로 바꿀 부분
			int cnt = fileService.fileInsert(fileVO);
			
			if(cnt > 0) {  // 파일 등록 성공
				
			}
		}
		
		
		
		
		
		
		return service.bookRequestInsert();
	}
	
}
