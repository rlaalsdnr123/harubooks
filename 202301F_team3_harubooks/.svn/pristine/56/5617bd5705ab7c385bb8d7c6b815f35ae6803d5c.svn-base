package kr.or.ddit.vo.kmw;

import java.util.List;



public class PaginationVO<T> {	// <T> : 가변 변수. 내가 지정한 타입에 맞춰서 변형
	private int totalRecord; // 총 개시글 수
	private int totalPage;	// 총 페이지 수
	private int currentPage; // 현재 페이지
	private int screenSize = 12; //한 페이지 당 보여줄 책 개수.
	private int blockSize = 5; // 페이지 블록 수 설정
	private int startRow;	//시작 row
	private int endRow; 	//끝 row
	private int startPage; 	// 시작 페이지
	private int endPage;	//끝 페이지
	private List<T> dataList; // 결과를 넣을 데이터 리스트
	private String searchType; // 검색 타입(제목, 내용, 작가, 작성일 등등)
	private String searchWord;	//검색 단어(키워드)
	private String ccg_b002;	// 대분류
	private String ccg_b003;  // 소분류
	
	public PaginationVO() {}
	
	// PaginationVO객체를 만들때, 한 페이지당 게시글 수와 페이지 블록 수를 
	// 원하는 값으로 초기화 할 수 있도록 Custom 생성자 생성
	public PaginationVO(int screenSize, int blockSize) {
		super();
		this.screenSize = screenSize;
		this.blockSize = blockSize;
	}

	public int getTotalRecord() {
		return totalRecord;
	}



	public int getTotalPage() {
		return totalPage;
	}

	public void setTotalPage(int totalPage) {
		this.totalPage = totalPage;
	}

	public int getCurrentPage() {
		return currentPage;
	}


	public int getScreenSize() {
		return screenSize;
	}

	public void setScreenSize(int screenSize) {
		this.screenSize = screenSize;
	}

	public int getBlockSize() {
		return blockSize;
	}

	public void setBlockSize(int blockSize) {
		this.blockSize = blockSize;
	}

	public int getStartRow() {
		return startRow;
	}

	public void setStartRow(int startRow) {
		this.startRow = startRow;
	}

	public int getEndRow() {
		return endRow;
	}

	public void setEndRow(int endRow) {
		this.endRow = endRow;
	}

	public int getStartPage() {
		return startPage;
	}

	public void setStartPage(int startPage) {
		this.startPage = startPage;
	}

	public int getEndPage() {
		return endPage;
	}

	public void setEndPage(int endPage) {
		this.endPage = endPage;
	}

	public List<T> getDataList() {
		return dataList;
	}

	public void setDataList(List<T> dataList) {
		this.dataList = dataList;
	}

	public String getSearchType() {
		return searchType;
	}

	public void setSearchType(String searchType) {
		this.searchType = searchType;
	}

	public String getSearchWord() {
		return searchWord;
	}

	public void setSearchWord(String searchWord) {
		this.searchWord = searchWord;
	}

	public String getCcg_b002() {
		return ccg_b002;
	}

	public void setCcg_b002(String ccg_b002) {
		this.ccg_b002 = ccg_b002;
	}

	public String getCcg_b003() {
		return ccg_b003;
	}

	public void setCcg_b003(String ccg_b003) {
		this.ccg_b003 = ccg_b003;
	}
	
	public void setTotalRecord(int totalRecord) {
		this.totalRecord = totalRecord;
		// 총 페이지 수 구하기
		// ceil 올림
		// 예) 총 게시글이 102개있는데 screenSize(한페이지에서 보여줄 게시글수)가 10이면 총 페이지이면
		// 총 페이지수는 102/10 = 10.2가되고 소수점은 반올림하므로 11개가된다
		totalPage = (int) Math.ceil(totalRecord/(double)screenSize);

	}
	
	public void setCurrentPage(int currentPage) {
		this.currentPage = currentPage;	// 현재 페이지
		endRow = currentPage * screenSize; // 끝 row = 현재 페이지 * 한페이지당 게시글 수
		startRow = endRow - (screenSize-1); // 시작row = 끝 row - (한페이지당 게시글 수 -1)
		// 마지막 페이지 = (현재 페이지 + (페이지 블록 사이즈 -1)) / 페이지 블록 사이즈 * 페이지 블록 사이즈
		endPage = (currentPage + (blockSize -1 ))/ blockSize * blockSize;
		startPage = endPage - (blockSize -1); // 시작 페이지 = 마지막 페이지 - (페이지 블록 사이즈 -1)
	}
	
	public String getPagingHTML() {
	
	    StringBuffer html = new StringBuffer();
	      
	      // 부트 스트랩을 이용하던 여러 css요소를 이용해서 페이징 UI를 구현하는 곳입니다!
	      html.append("<nav aria-label=\'Page navigation example\'>");
	      html.append("<ul class='pagination justify-content-center\'>");
	      if(startPage >1) {
	         html.append("<li class='page-item disabled'><a href='' class='page-link' data-page='"+(startPage - blockSize) + "'><span class=\"material-icons\">PREV</span></a></li>");
	      }
	      for(int i = startPage; i<= (endPage < totalPage ? endPage : totalPage); i++) {
	         if(i == currentPage) {
	            html.append("<li class='page-item active'><span class='page-link'>"+i+"</span></li>");
	         } else {
	            html.append("<li class='page-item'><a href='' class='page-link' data-page='"+i+"'>"+i+"</a></li>");
	         }
	      }
	      if(endPage < totalPage) {
	         html.append("<li class='page-item'><a href='' class='page-link' data-page='"+(endPage+1)+"'><span class=\"material-icons\">NEXT</span></a></li>");
	      }
	      html.append("</ul>");
	      html.append("</nav>");
	      return html.toString();
	}
	
}
