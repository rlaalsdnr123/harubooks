package kr.or.ddit.controller.kmw.harubooks;

import java.util.List;

import javax.inject.Inject;

import org.apache.commons.lang3.StringUtils;
import org.springframework.security.core.context.SecurityContextHolder;

import org.springframework.stereotype.Controller;
import org.springframework.ui.Model;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestParam;

import kr.or.ddit.service.kmw.BookService;
import kr.or.ddit.vo.kmw.BookInfoVO;
import kr.or.ddit.vo.kmw.PaginationVO;
import lombok.extern.slf4j.Slf4j;


@Slf4j
@Controller
@RequestMapping("/harubooks")
public class HaruBooksController {
	
	@Inject
	private BookService service;
	
	@GetMapping("")
	public String firstPage() {
		return "bookstore/harufirst";
	}
	
	@GetMapping("/main")
	public String mainPage(Model model) {
		log.debug("유저 정보 : "+ SecurityContextHolder.getContext().getAuthentication());
		// 시큐리티 세션에 존재하는 유저 ID가져오는 변수
		String userId =  SecurityContextHolder.getContext().getAuthentication().getName();	
		if(userId != null) {
			model.addAttribute("userId",userId);
			return "bookstore/home/home";
		}
		return "bookstore/home/home";	
		
	}
	
	// 도서 분류 클릭시 페이지 이동
	@RequestMapping(value = "/category")
	public String bookList(@RequestParam(required = false) String ccg_b002,
						   @RequestParam(required = false) String ccg_b003,
						   @RequestParam(name="page", required = false, defaultValue = "1") int currentPage,
						   @RequestParam(required = false) String searchWord,
						   Model model) {
		PaginationVO<BookInfoVO> pagingVO = new PaginationVO<BookInfoVO>();
		
		// 검색 기능 추가 시 활용
		if(StringUtils.isNotBlank(searchWord)) {
			pagingVO.setSearchWord(searchWord);
			model.addAttribute("searchWord",searchWord);
		}

		log.info("대분류 : "+ccg_b002);
		log.info("소분류 : "+ccg_b003);
		pagingVO.setCcg_b002(ccg_b002);
		pagingVO.setCcg_b003(ccg_b003);
		
		
		pagingVO.setCurrentPage(currentPage);
		int totalRecord = service.bookCount(pagingVO); // 총 책의 개수
		pagingVO.setTotalPage(totalRecord);
		System.out.println(totalRecord);
		System.out.println(pagingVO.getTotalPage());
		//List<BookInfoVO> bookList = service.bookInfo(vo);
		// 책 리스트
		List<BookInfoVO> bookList = service.selectBookList(pagingVO);
		System.out.println(bookList);
		pagingVO.setDataList(bookList);
		model.addAttribute("pagingVO",pagingVO);
		
		
		return "bookstore/shop/categoryBooks";
	}
}
