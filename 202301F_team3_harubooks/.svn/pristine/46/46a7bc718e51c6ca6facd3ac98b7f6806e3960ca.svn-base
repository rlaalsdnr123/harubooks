package kr.or.ddit.controller.jhs.haruter;

import java.util.ArrayList;
import java.util.List;
import java.util.Map;

import javax.inject.Inject;

import org.springframework.security.core.context.SecurityContextHolder;
import org.springframework.web.socket.CloseStatus;
import org.springframework.web.socket.TextMessage;
import org.springframework.web.socket.WebSocketSession;
import org.springframework.web.socket.handler.TextWebSocketHandler;

import kr.or.ddit.service.bmk.IHarustoryService;
import kr.or.ddit.vo.bmk.BoardVO;
import kr.or.ddit.vo.bmk.ReplyVO;
import kr.or.ddit.vo.jhs.BellVO;
import kr.or.ddit.vo.jhs.Chat_MemVO;

public class HaruterEcho extends TextWebSocketHandler{
	
	@Inject
	private IHarustoryService service;
	
	private List<WebSocketSession> custom = new ArrayList<>();
	
	
	@Override
	public void afterConnectionEstablished(WebSocketSession wsession) throws Exception {
		custom.add(wsession);
	}

	@Override
	protected void handleTextMessage(WebSocketSession wsession, TextMessage message) throws Exception {
		BellVO bellVo = BellVO.converMessage(message.getPayload());
	
		List<BoardVO> bvo = new ArrayList<BoardVO>();
		bvo = service.getMyStoryListBell(bellVo.getYou());			
		
		List<ReplyVO> rvo = new ArrayList<ReplyVO>();
		
		for(BoardVO vo : bvo) {
			List<ReplyVO> tempVO = service.boardBellCount(vo.getBoard_no());
			for(ReplyVO tempReplyVO : tempVO) {
				rvo.add(tempReplyVO);
			}
		}
		Map<String, Object> info = wsession.getAttributes();
		String memberId = (String) info.get("aeId");
		
		for(WebSocketSession session : custom) {
			// 내가 처음 들어올 때 나에게 온 댓글들을 알림으로 확인한다
			if(bellVo.getMy().equals(bellVo.getYou())) {
				if(wsession.getId().equals(session.getId())) {
					if(rvo.size() > 0) {
						for(ReplyVO tempVO : rvo) {					
						session.sendMessage(new TextMessage(
								  "status1:<div id='echo-reply' class='echo-count' data-board="+tempVO.getBoard_no()+">"
								+ "				<span>"+tempVO.getMem_nicknm()+"님이 댓글을 달았습니다.</span>"
								+ "		   </div>"));
						}
					}else if(rvo.size() <= 0) {
						session.sendMessage(new TextMessage(
							  "status2:<div id='echo-reply'>"
							+ "				<span>알림이 없습니다.</span>"
							+ "		   </div>"));
					}
				// 누가 댓글을 달았을 때 해당 게시판 사용자에게 알림이 가게 한다.
				}
			}else if(memberId.equals(bellVo.getYou())) {
					for(ReplyVO tempVO : rvo) {					
						session.sendMessage(new TextMessage(
							  "status1:<div id='echo-reply' class='echo-count' data-board="+tempVO.getBoard_no()+">"
							+ "				<span>"+tempVO.getMem_nicknm()+"님이 댓글을 달았습니다.</span>"
							+ "		   </div>"));
					}
			}
		}
		
	}

	@Override
	public void afterConnectionClosed(WebSocketSession wsession, CloseStatus status) throws Exception {
		
	}
}
