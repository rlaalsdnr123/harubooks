package kr.or.ddit.controller.file;

import java.awt.image.BufferedImage;
import java.io.File;
import java.io.IOException;
import java.text.DecimalFormat;
import java.util.Calendar;
import java.util.UUID;

import javax.imageio.ImageIO;

import org.imgscalr.Scalr;
import org.springframework.util.FileCopyUtils;

public class UploadFileUtils {

	
	
	public static String uploadFile(String uploadPath, String originalName, byte[] fileData) throws IOException {
		UUID uuid = UUID.randomUUID();
		String savedName = uuid.toString() + "_" + originalName;	// 저장 이름 : uuid_원본파일 이름
		
		String formatName = originalName.substring(originalName.lastIndexOf(".")+1);	// 확장자
		
		File target = new File(uploadPath, savedName);
		FileCopyUtils.copy(fileData, target);
		String uploadedFileName = uploadPath + "/" + savedName;
		
		if(MediaUtils.getMediaType(formatName) != null) {
			makeThumbnail(uploadPath, savedName);
		}
		return uploadedFileName;
	}

	private static void makeThumbnail(String uploadPath, String fileName) throws IOException {
		BufferedImage sourceImg = ImageIO.read(new File(uploadPath, fileName));
		
		// Method.AUTOMATIC : 최소 시간 내에 가장 잘 보이는 이미지를 얻기 위한 사용 방식
		// Mode.FIT_TO_HEIGHT : 이미지 방향과 상관없이 주어진 높이 내에서 가장 잘 맞는 이미지로 계산 (높이 위주)
		// targetSize : 값 100, 정사각형 사이즈로 100x100
		BufferedImage destImg= Scalr.resize(sourceImg, Scalr.Method.AUTOMATIC, Scalr.Mode.FIT_TO_HEIGHT, 100);
		// 업로드 한 원본 이미지를 가지고 's_'를 붙여서 임시 파일로 만든다. 
		String thumbnailName = uploadPath+ File.separator + "s_" + fileName;
		
		File newFile = new File(thumbnailName);
		String formatName = fileName.substring(fileName.lastIndexOf(".") + 1);
		ImageIO.write(destImg, formatName.toUpperCase(), newFile);	// 's_'가 붙은 썸네일 이미지를 만든다. 
	}

}
