package kr.or.ddit.controller.kmw.harubooks;

import java.util.List;
import java.util.Map;

import javax.inject.Inject;

import org.springframework.security.core.context.SecurityContextHolder;
import org.springframework.stereotype.Controller;
import org.springframework.ui.Model;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.PostMapping;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.ResponseBody;

import kr.or.ddit.service.LoginService;
import kr.or.ddit.service.kmw.BookService;
import kr.or.ddit.service.kmw.OrderService;
import kr.or.ddit.vo.UserInfoVO;
import kr.or.ddit.vo.kmw.OrderVO;

@Controller
@RequestMapping("/harubooks/myPage")
public class MyPageMainController {
	@Inject
	private OrderService orderService;
	
	@Inject
	private BookService bookService;
	
	@Inject
	private LoginService userSevice;
	
	@GetMapping("/orderList")
	public String myPageMain(Model model) {
		String ae_id = SecurityContextHolder.getContext().getAuthentication().getName();
		// 장바구니 개수
		int cartCnt = bookService.cartCnt(ae_id);
		// 유저 정보
		UserInfoVO userInfo = userSevice.selectUser(ae_id);
		// 찜목록 개수
		int wishCnt = bookService.wishCnt(ae_id);
		// 배송준비 개수
		int preparedDelivery = orderService.preparedDelivery(ae_id);
		// 배송 중 개수
		int DeliveringCnt = orderService.DeliveringCnt(ae_id);
		// 배송완료 개수
		int finishDelivery = orderService.finishDelivery(ae_id);
		// 환불 여부 개수
		int refundCnt = orderService.refundCnt(ae_id);
		model.addAttribute("cartCnt", cartCnt);
		model.addAttribute("userInfo", userInfo);
		model.addAttribute("wishCnt", wishCnt);
		model.addAttribute("preparedDelivery",preparedDelivery);
		model.addAttribute("DeliveringCnt",DeliveringCnt);
		model.addAttribute("finishDelivery",finishDelivery);
		model.addAttribute("refundCnt",refundCnt);
		return "bookstore/mypage/myOrderList";
	}
	// 배송 되기전에 시킨 상품들 리스트
	@ResponseBody
	@GetMapping(value = "/currentPurchase", produces = "application/json;charset=utf-8")
	public List<OrderVO> currentPurchase(){
		String ae_id = SecurityContextHolder.getContext().getAuthentication().getName();
		List<OrderVO> list = orderService.preparedProd(ae_id);
		return list;
	}
	
	// 배송완료된 후 구매 확정 전인 목록
	@ResponseBody
	@GetMapping(value = "/completeDelivery", produces = "application/json;charset=utf-8")
	public List<OrderVO> completeDelivery(){
		String ae_id = SecurityContextHolder.getContext().getAuthentication().getName();
		List<OrderVO> list = orderService.completeDeliveryList(ae_id);
		return list;
	}
	// 구매확정 버튼을 눌렀을시 로직
	@ResponseBody
	@PostMapping("/purchaseConfirm")
	public String purchaseConfirm(@RequestBody Map<String, String>resMap) {
		String ae_id = SecurityContextHolder.getContext().getAuthentication().getName();
		String book_no = resMap.get("bookNo");
		String order_no = resMap.get("orderNO");
		String expected_mileage = resMap.get("expectedMileage");
		String pl_cnt = resMap.get("plCnt");
		String result;
		OrderVO vo = new OrderVO();
		vo.setAe_id(ae_id);
		vo.setBook_no(book_no);
		vo.setOrder_no(order_no);
		vo.setExpected_mileage(expected_mileage);
		vo.setPl_cnt(pl_cnt);
		int res = orderService.decisionPurchase(vo);
		if(res > 0) {
			result = "OK";
		}else {
			result = "FAIL";
		}
		return result;
	}
	
	// 환불 요청 로직
}
